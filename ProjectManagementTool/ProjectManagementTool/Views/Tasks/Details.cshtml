@model DataAccessLayer.Models.ViewModel.TaskDetailsVM

@{
    ViewData["Title"] = "Task Details";
    Model.MemberList[0] = "N/A";
    Model.StatusList[0] = "N/A";
    Model.PriorityList[0] = "N/A";
}

<div class="d-flex justify-content-between">
	<h3 class="text-center">Task : @Model.Tasks.Name</h3>
	<div>
		<a class="btn btn-light" asp-controller="Tasks" asp-action="Edit" asp-route-id="@Model.Tasks.TaskId">
			<i class="text-success fa-solid fa-pen"> Edit</i>
		</a>
		<a class="btn btn-light" onclick="openDeleteTaskModal('@Model.Tasks.TaskId')">
			<i class="text-danger fa-solid fa-trash"> Delete</i>
		</a>
	</div>
</div>

<hr />

<div>
	@Model.Tasks.Descripton
    <hr />
</div>
@if (Model.StatusList.ContainsKey(Model.Tasks.Status) == false)
{
    Model.StatusList[Model.Tasks.Status] = "Not Found";
}
@if (Model.PriorityList.ContainsKey(Model.Tasks.Priority) == false)
{
    Model.StatusList[Model.Tasks.Priority] = "Not Found";
}
@if (Model.MemberList.ContainsKey(Model.Tasks.AssignMembersId) == false)
{
    Model.MemberList[Model.Tasks.AssignMembersId] = "Not Found";
}
@if (Model.MemberList.ContainsKey(Model.Tasks.ReviewerMemberId) == false)
{
    Model.MemberList[Model.Tasks.ReviewerMemberId] = "Not Found";
}
<div>
    <table>
        <tbody>
            <tr>
                <td>Estimated Time :  </td>
                <th><i>@Model.Tasks.EstimatedTime Hour</i></th>
            </tr>
            <tr>
                <td>Assignee :</td>
                <th><i>@Model.MemberList[Model.Tasks.AssignMembersId]</i></th>
            </tr>
            <tr>
                <td>Reviewer :</td>
                <th><i>@Model.MemberList[Model.Tasks.ReviewerMemberId]</i></th>
            </tr>
            <tr>
                <td>Status :</td>
                <th><i>@Model.StatusList[Model.Tasks.Status]</i></th>
            </tr>
            <tr>
                <td>Priority :</td>
                <th><i>@Model.PriorityList[Model.Tasks.Priority]</i></th>
            </tr>
            <tr>
                <td>User Story :</td>
                <th><i>@Model.StoryName</i></th>
            </tr>
        </tbody>
    </table>
    <hr />
</div>
<div class="d-flex justify-content-between">
    <h3>Sub Tasks</h3>
    <a class="btn btn-success w-25" asp-controller="SubTask" asp-action="Create" asp-route-id="@Model.Tasks.TaskId">
        <i class="text-light fa-solid fa-plus"></i> Sub Task
    </a>
</div>
<div>
    <table class="table">
        <thead>
            <tr>
                <th>
                    Sub Task
                </th>
                <th>
                    Status
                </th>
                <th>
                    Estimated Time
				</th>
				<th>
					Priority
				</th>
                <th>
                    Assignee
                </th>
                <th>
                    Reviewer
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.SubTask)
            {

                @if (Model.StatusList.ContainsKey(item.Status) == false)
                {
                    Model.StatusList[item.Status] = "Not Found";
                }
                @if (Model.PriorityList.ContainsKey(item.Priority) == false)
                {
                    Model.StatusList[item.Priority] = "Not Found";
                }
                @if (Model.MemberList.ContainsKey(item.AssignMembersId) == false)
                {
                    Model.MemberList[item.AssignMembersId] = "Not Found";
                }
                @if (Model.MemberList.ContainsKey(item.ReviewerMemberId) == false)
                {
                    Model.MemberList[item.ReviewerMemberId] = "Not Found";
                }
                <tr>
                    <td>
                        @item.Name
                    </td>
                    <td>
                        @Model.StatusList[item.Status]
                    </td>
                    <td>
                        @item.EstimatedTime Hour
                    </td>
                    <td>
                        @Model.PriorityList[item.Priority]
                    </td>
                    <td>
                        @Model.MemberList[item.AssignMembersId]
                    </td>
                    <td>
                        @Model.MemberList[item.ReviewerMemberId]
                    </td>
                    <td>
                        <a class="btn btn-light" asp-controller="SubTask" asp-action="Edit" asp-route-id="@item.SubTaskId">
                            <i class="text-success fa-solid fa-pen"></i>
                        </a>
                        <a class="btn btn-light" onclick="openDeleteModal(@item.SubTaskId)">
                            <i class="text-success fa-solid fa-trash"></i>
                        </a>
                        <a class="btn btn-light" onclick="openDetailsModal(@item.SubTaskId,'@item.Descripton')">
                            <i class="text-success fa-solid fa-circle-info"></i> 
                        </a>
                        <a id="playButton-@item.SubTaskId" class="btn btn-light @(item.TrackingStatus == "Started" ? "d-none" : "")" 
                        onclick="startTracking(@item.TaskId, @item.SubTaskId)">
                            <i class="text-success fa-solid fa-circle-play"></i>
                        </a>
                        <a id="pauseButton-@item.SubTaskId" class="btn btn-light @(item.TrackingStatus == "Started" ? "" : "d-none")" 
                        onclick="stopTracking(@item.TaskId, @item.SubTaskId)">
                            <i class="text-success fa-solid fa-circle-pause"></i>
                        </a>

                    </td>
                </tr>
            }
        </tbody>
    </table>
<hr />
</div>


<!-- Delete Modal -->
<div class="modal fade" id="modal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title text-black" id="exampleModalLabel">Delete Sub Task !!</h3>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-capitalize text-danger">
                After clicking on "Delete" button it won't be undone!!
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal">Cancel</button>
                <button type="button" onclick="confirmDelete()" class="btn btn-outline-danger">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Sub Task Details Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsModalLabel">Sub Task Description</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modalDescription">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!--Task delete modal -->

<div class="modal fade" id="modalTask" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title text-black" id="exampleModalLabel">Delete Task !!</h3>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-capitalize text-danger">
                You are deleting this Task. After clicking on "Delete" button it won't be undone!!
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal">Cancel</button>
                <button type="button" onclick="confirmTaskDelete()" class="btn btn-outline-danger">Delete</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>

        // Convert seconds into day, hour, minutes and second
        function secondsToDHMS(seconds) {
            seconds = Number(seconds);
            var day = Math.floor(seconds / (3600 * 24));
            var hour = Math.floor((seconds % (3600 * 24)) / 3600);
            var minutes = Math.floor((seconds % 3600) / 60);
            var sec = Math.floor(seconds % 60);
            var dhms = day + " days " + hour + " hours " + minutes + " minutes " + sec + " seconds";
            return dhms;
        }

        // Formate the details
        function showDetailsModal( description, startTime, endTime, totalTime) {
            description = "Description: " + description + "\n";
            startTime = "Start time: " + startTime + "\n";
            endTime = "End time: " + endTime + "\n";
            seconds = secondsToDHMS(totalTime);
            totalTime = "Total time: " + seconds;
            
            document.getElementById('modalDescription').innerText = description  + startTime + endTime + totalTime;
            var myModal = new bootstrap.Modal(document.getElementById('detailsModal'));
            
            myModal.show();
        }

        // Calling from details button
        function openDetailsModal(subTaskId,description){
            $.ajax({
                url: "/TimeTrack/GetTimeBySubTaskId",
                type: "GET",
                data: { subTaskId: subTaskId 
                },
                success: function (response) {
                    if (response.success == true) {
                        showDetailsModal(description, response.startTime, response.endTime, response.totalTime);
                    }
                    else {
                        document.getElementById('modalDescription').innerText = "Description: " + description + "\n don't work previously in this sub-task";
                        var myModal = new bootstrap.Modal(document.getElementById('detailsModal'));
                        myModal.show();
                    }
                    
                },
                error: function (xhr, status, error) {
                    alert("Error stopping tracking: " + error);
                }
            });
        }

        var deleteSubTaskId = null;
        var deleteTaskId = null;

        function openDeleteModal(taskId) {
            deleteSubTaskId = taskId;
            $('#modal').modal('show'); 
        }


        function confirmDelete() {
            if (deleteSubTaskId) {
                $.ajax({
                    url: '/SubTask/Delete/' + deleteSubTaskId,
                    type: 'POST',
                    success: function (response) {
                        $('#modal').modal('hide'); 
                        location.reload(); 
                    },
                    error: function () {
                        alert('Error deleting sub task.');
                    }
                });
            }
        }

        // for task delete

        function openDeleteTaskModal(taskId) {
            deleteTaskId = taskId;
            $('#modalTask').modal('show');
        }


        function confirmTaskDelete() {
            if (deleteTaskId) {
                $.ajax({
                    url: '/Tasks/Delete/' + deleteTaskId,
                    type: 'POST',
                    success: function (response) {
                        $('#modalTask').modal('hide');
                     //   alert('@Url.Action("Details", "UserStory", new { id = Model.Tasks.UserStoryId })')
                        window.location.href = '@Url.Action("Details", "UserStory", new { Id = Model.Tasks.UserStoryId })';
                    },
                    error: function () {
                        alert('Error deleting task.');
                    }
                });
            }
        }

        // Button tracking handle
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll("[id^=playButton-]").forEach(button => {
                let subTaskId = button.id.split("-")[1];
                let status = localStorage.getItem("tracking-" + subTaskId);

                if (status === "Started") {
                    document.getElementById("playButton-" + subTaskId).classList.add("d-none");
                    document.getElementById("pauseButton-" + subTaskId).classList.remove("d-none");
                } else {
                    document.getElementById("playButton-" + subTaskId).classList.remove("d-none");
                    document.getElementById("pauseButton-" + subTaskId).classList.add("d-none");
                }
            });
        });

        // Time track starting
        function startTracking(taskId, subTaskId) {
            $.ajax({
                url:"/TimeTrack/Start",
                type: 'POST',
                data: { taskId: taskId, subTaskId: subTaskId },
                success: function(response) {
                    if (response.status === "Started") { 
                        localStorage.setItem("tracking-" + subTaskId, "Started");
                    }

                    $("#playButton-" + subTaskId).addClass("d-none");
                    $("#pauseButton-" + subTaskId).removeClass("d-none");
                },
                error: function () {
                    alert("Error starting tracking for Task ID: " + taskId + ", SubTask ID: " + subTaskId);
				}
            });
        }

        // Time track stopping
        function stopTracking(taskId, subTaskId) { 
            $.ajax({
                url: "/TimeTrack/End",
                type: 'POST',
                data: { taskId: taskId, subTaskId: subTaskId },
                success: function (response) {
                    if (response.status === "Stopped") {
                        localStorage.setItem("tracking-" + subTaskId, "Stopped");
                    }

                    $("#pauseButton-" + subTaskId).addClass("d-none");
                    $("#playButton-" + subTaskId).removeClass("d-none");
                },
                error: function () {
                    alert("Error stopping tracking for Task ID: " + taskId + ", SubTask ID: " + subTaskId);
                }
            }); 
        }

    </script>
}