@model DataAccessLayer.Models.ViewModel.MemberDetailsVM
@using DataAccessLayer.StaticClass

@{
    ViewData["Title"] = "Details";
    ViewData["Banner"] = @Model.Email;
}

@{

    var breadcrumbs = new List<KeyValuePair<string, string>>
    {
        new KeyValuePair<string, string>("","#"),
        new KeyValuePair<string, string>("Project", Url.Action(ActionNameHelper.IndexActionName, ControllerNameHelper.ProjectControllerName) ?? string.Empty),
        new KeyValuePair<string, string>("Dashboard", Url.Action(ActionNameHelper.DetailsActionName, ControllerNameHelper.ProjectControllerName, new{ id = ViewBag.ProjectId })?? string.Empty),
        new KeyValuePair<string, string>("Member", Url.Action(ActionNameHelper.IndexActionName, ControllerNameHelper.MemberControllerName, new{ projectId = ViewBag.ProjectId }) ?? string.Empty),
        new KeyValuePair<string, string>("Details", "#"),
    };
    ViewData["Breadcrumbs"] = breadcrumbs;
}

<!--card start-->
<div class="card shadow-lg">

    <div class="card-body fw-bolder">

        <div class="row g-3 mt-4">
            <div class="col-md-3">
                <div class="card h-100 text-center shadow-sm">
                    <div class="card-header bg-light">
                        <h4>Total Tasks</h4>
                    </div>
                    <div class="card-body">
                        <h1>@Model.TaskAll</h1>
                    </div>
                </div>
            </div>


            @foreach (var item in Model.StatusList)
            {
                @if (Model.TaskDict.ContainsKey(item.Key) == false)
                {
                    Model.TaskDict[item.Key] = 0;
                }
                    <div class="col-md-3">
                        <div class="card h-100 text-center shadow-sm">
                            <div class="card-header bg-light">
                                <h4>@item.Value</h4>
                            </div>
                            <div class="card-body">
                                <h1 id="taskInProgress">@Model.TaskDict[item.Key]</h1>
                            </div>
                        </div>
                    </div>

            }

        </div>
        <div class="row g-3 mt-4">
            <div class="col-md-3">
                <div class="card h-100 text-center shadow-sm">
                    <div class="card-header bg-light">
                        <h4>Total Bugs</h4>
                    </div>
                    <div class="card-body">
                        <h1>@Model.BugAll</h1>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="card h-100 text-center shadow-sm">
                    <div class="card-header bg-light">
                        <h4>In Progress</h4>
                    </div>
                    <div class="card-body">
                        <h1>@Model.BugInProgress</h1>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card h-100 text-center shadow-sm">
                    <div class="card-header bg-light">
                        <h4>Urgent</h4>
                    </div>
                    <div class="card-body">
                        <h1>@Model.BugUrgent</h1>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card h-100 text-center shadow-sm">
                    <div class="card-header bg-light">
                        <h4>Closed</h4>
                    </div>
                    <div class="card-body">
                        <h1>@Model.BugClosed</h1>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<!--card end-->

<div class="d-flex justify-content-between mb-2 mt-3">
    <h3>Assigned Tasks</h3>
</div>

<div>
    <table class="table table-bordered table-striped table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>

                <th>
                    Description
                </th>

                <th>
                   Estimated Time
                </th>
                <th>
                    Tag
                </th>
                <th>
                    Status
                </th>
                <th>
                    Priority
                </th>

            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Tasks.Any())
            {
                @foreach (var item in Model.Tasks)
                {
                    @if (Model.StatusList.ContainsKey(item.Status) == false)
                    {
                        Model.StatusList[item.Status] = "Not Found";
                    }
                    @if (Model.PriorityList.ContainsKey(item.Priority) == false)
                    {
                        Model.StatusList[item.Priority] = "Not Found";
                    }
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Descripton)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.EstimatedTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Tag)
                        </td>
                        <td>
                            @Model.StatusList[item.Status]
                        </td>
                        <td>
                            @Model.PriorityList[item.Priority]
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="7" class="text-center fw-bold text-danger">No Tasks found!</td>
                </tr>
            }


        </tbody>

    </table>
</div>

<div class="d-flex justify-content-between mb-2">
    <h3>Assigned Bugs</h3>
</div>

<div>
    <table class="table table-bordered table-striped table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>

                <th>
                    Description
                </th>

                <th>
                    QA-Remarks
                </th>
                <th>
                    Status
                </th>
                <th>
                    Priority
                </th>

            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Bugs.Any())
            {
                @foreach (var item in Model.Bugs)
                {
                    @if (Model.StatusList.ContainsKey(item.Status) == false)
                    {
                        Model.StatusList[item.Status] = "Not Found";
                    }
                    @if (Model.PriorityList.ContainsKey(item.Priority) == false)
                    {
                        Model.StatusList[item.Priority] = "Not Found";
                    }
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Descripton)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.QaRemarks)
                        </td>
                        <td>
                            @Model.StatusList[item.Status]
                        </td>
                        <td>
                            @Model.PriorityList[item.Priority]
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="7" class="text-center fw-bold text-danger">No Bugs found!</td>
                </tr>
            }


        </tbody>

    </table>
</div>

