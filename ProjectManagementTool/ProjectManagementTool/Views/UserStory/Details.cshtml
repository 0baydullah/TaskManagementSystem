@model DataAccessLayer.Models.ViewModel.UserStoryDetailsVM
@using DataAccessLayer.StaticClass

@{
    ViewData["Title"] = "User Story Details";
	ViewData["Banner"] = "Story Details";
    Model.MemberList[0] = "N/A";
    Model.StatusList[0] = "N/A";
    Model.CategoryList[0] = "N/A";
    Model.PriorityList[0] = "N/A";
    Model.SprintList[0] = "N/A";
}
@{ 
    var breadcrumbs = new List<KeyValuePair<string, string>>
    {
        new KeyValuePair<string, string>("","#"),
        new KeyValuePair<string, string>("Project", Url.Action(ActionNameHelper.IndexActionName, ControllerNameHelper.ProjectControllerName)??string.Empty),
        new KeyValuePair<string, string>("Dashboard", Url.Action(ActionNameHelper.DetailsActionName, ControllerNameHelper.ProjectControllerName,new{id = ViewBag.ProjectId })?? string.Empty),
        new KeyValuePair<string, string>("UserStories", Url.Action(ActionNameHelper.IndexActionName, ControllerNameHelper.UserStoryControllerName,new{projectId = ViewBag.ProjectId })?? string.Empty),
        new KeyValuePair<string, string>("StoryDetails", "#")
    };
    ViewData["Breadcrumbs"] = breadcrumbs;
}

@if (TempData["error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show " role="alert" id="error">
        <strong>Error!</strong> @TempData["error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
else
{

    <div class="d-flex justify-content-between">
        <h3 class="text-center">User Story : @Model.Story.StoryName</h3>
    </div>

    <hr />

    <div>
        @Model.Story.Description 
        <hr />
    </div>
    <div>
        <table>
            <tbody>
                <tr>
                    <td>Points :</td>
                    <th><i>@Model.Story.Points</i></th>
                </tr>
                <tr>
                    <td>Status :</td>
                    @{
                        var statusid = (int) Model.Story.Status;
                        var priorityid = (int)Model.Story.Priority;
                        var categoryid = (int)Model.Story.Category;
                    }
                    @if (Model.StatusList.ContainsKey(statusid) == false)
                    {
                        Model.StatusList[statusid] = "Not Found";
                    }
                    @if (Model.PriorityList.ContainsKey(priorityid) == false)
                    {
                        Model.StatusList[priorityid] = "Not Found";
                    }
                    @if (Model.CategoryList.ContainsKey(categoryid) == false)
                    {
                        Model.CategoryList[categoryid] = "Not Found";
                    }

					<th><i>@Model.StatusList[statusid]</i></th>
                </tr>
                <tr>
                    <td>Priority :</td>
                    <th><i>@Model.PriorityList[priorityid]</i></th>
                </tr>
                <tr>
                    <td>Category :</td>
                    <th><i>@Model.CategoryList[categoryid]</i></th>
                </tr>
                <tr>
                    <td>Sprint :</td>
                    <th><i>@Model.SprintList[Model.Story.SprintId]</i></th>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="d-flex justify-content-between mt-5 mb-2">
        <h3>Tasks</h3>
        <a class="btn btn-success w-25" asp-controller="Tasks" asp-action="Create" asp-route-id="@Model.Story.StoryId">
            <i class="text-light fa-solid fa-plus"></i> Task
        </a>
    </div>
    <div>
        <table class="table table-bordered table-striped table-hover">
            <thead>
                <tr>
                    <th>
                        Task
                    </th>
                    <th>
                        Status
                    </th>
                    <th>
                        Estimated Time
				    </th>
				    <th>
					    Priority
				    </th>
                    <th>
                        Assignee
                    </th>
                    <th>
                        Reviewer
                    </th>
                    <th class="text-center">
                        Actions 
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Tasks)
                {
                    @if (Model.StatusList.ContainsKey(item.Status) == false)
                    {
                        Model.StatusList[item.Status] = "Not Found";
                    }
                    @if (Model.PriorityList.ContainsKey(item.Priority) == false)
                    {
                        Model.StatusList[item.Priority] = "Not Found";
                    }
                    @if (Model.MemberList.ContainsKey(item.AssignMembersId) == false)
                    {
                        Model.MemberList[item.AssignMembersId] = "Not Found";
                    }
                    @if (Model.MemberList.ContainsKey(item.ReviewerMemberId) == false)
                    {
                        Model.MemberList[item.ReviewerMemberId] = "Not Found";
                    }
                    <tr>
                        <td>
                            <a class="text-decoration-none fw-bold" asp-controller="Tasks" asp-action="Details" asp-route-id="@item.TaskId" asp-route-projectId="@ViewBag.ProjectId">
                                @item.Name
                            </a>
                        </td>
                        <td>
                            @Model.StatusList[item.Status]
                        </td>
                        <td>
                            @item.EstimatedTime Hour
                        </td>
                        <td>
                            @Model.PriorityList[item.Priority]
                        </td>
                        <td>
                            @Model.MemberList[item.AssignMembersId]
                        </td>
                        <td>
                            @Model.MemberList[item.ReviewerMemberId]
                        </td>
                        <td class="text-center">

                            <a class="btn btn-light" asp-controller="Tasks" asp-action="Edit" asp-route-id="@item.TaskId">
                                <i class="text-success fa-solid fa-pen"></i>
                            </a>
                            <a class="btn btn-light" onclick="openDeleteModal(@item.TaskId)">
                                <i class="text-danger fa-solid fa-trash"></i>
                            </a>
                            @if (@item.SubTaskCount == 0 && (@Model.MemberId == @item.AssignMembersId || @Model.AdminMemberIds.Contains(Model.MemberId)))
                           {
                                <a id="playButton-@item.TaskId" class="btn btn-light @(item.TrackingStatus == "Started" ? "d-none" : "")"
                                   onclick="startTracking(@item.TaskId)">
                                    <i class="text-warning fa-solid fa-circle-play"></i>
                                </a>
                                <a id="pauseButton-@item.TaskId" class="btn btn-light @(item.TrackingStatus == "Started" ? "" : "d-none")"
                                   onclick="stopTracking(@item.TaskId)">
                                    <i class="text-warning fa-solid fa-circle-pause"></i>
                                </a>
                           }
                           else
                           {
                                <a style ="pointer-events:none;" id="playButton-@item.TaskId" class="btn btn-light @(item.TrackingStatus == "Started" ? "d-none" : "")"
                                   onclick="startTracking(@item.TaskId)">
                                    <i  class="text-danger fa-solid fa-circle-xmark"></i>
                                </a>
                                <a style="pointer-events:none;" id="pauseButton-@item.TaskId" class="btn btn-light @(item.TrackingStatus == "Started" ? "" : "d-none")"
                                   onclick="stopTracking(@item.TaskId)">
                                    <i  class="text-danger fa-solid fa-circle-xmark"></i>
                                </a>
                           }
                            
                            <a id="pauseButton-@item.TaskId" class="btn btn-light"
                               onclick="timeDetails(@item.TaskId)">
                                <i class="text-primary fa-solid fa-stopwatch"></i>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


    <!-- Delete Modal -->
    <div class="modal fade" id="modal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title text-black" id="exampleModalLabel">Delete Task !!</h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-capitalize text-danger">
                    After clicking on "Delete" button it won't be undone!!
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" onclick="confirmDelete()" class="btn btn-outline-danger">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Modal for User Story-->
    <div class="modal fade" id="modalUSD" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title text-black" id="exampleModalLabel">Delete User Story !!</h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-capitalize text-danger">
                    You are deleting this user story. After clicking on "Delete" button it won't be undone!!
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" onclick="confirmUSDelete()" class="btn btn-outline-danger">Delete</button>
                </div>
            </div>
        </div>
    </div>


    <!-- Task Details Modal -->
    <div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="detailsModalLabel">Task Description</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body" id="modalDescription"></div>
                <div class="modal-body" id="eachTimeDescription"> </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>



    <!-- bug section -->

    <div class="d-flex justify-content-between mt-5  mb-2">
        <h3>Bugs</h3>
        <a class="btn btn-danger w-25" asp-controller="Bug" asp-action="Create" asp-route-id="@Model.Story.StoryId">
            <i class="text-light fa-solid fa-plus"></i> Bug
        </a>
    </div>
    <div>
        <table class= " table table-bordered table-striped table-hover">
            <thead>
                <tr>
                    <th>
                        Bug
                    </th>
                    <th>
                        Status 
                    </th>
                    <th>
                        Priority
                    </th>
                    <th>
                        Assignee
                    </th>
                    <th class="text-center">
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Bugs)
                {
                    @if (Model.StatusList.ContainsKey(item.Status) == false)
                    {
                        Model.StatusList[item.Status] = "Not Found";
                    }
                    @if (Model.PriorityList.ContainsKey(item.Priority) == false)
                    {
                        Model.StatusList[item.Priority] = "Not Found";
                    }
                    @if (Model.MemberList.ContainsKey(item.AssignMembersId) == false)
                    {
                        Model.MemberList[item.AssignMembersId] = "Not Found";
                    }
                    <tr>
                        <td>
                            <a class="fw-bold text-decoration-none" asp-controller="Bug" asp-action="Details" asp-route-id="@item.BugId" asp-route-projectId="@ViewBag.ProjectId">
                                @item.Name
                            </a>
                        </td>
                        <td>
                            @Model.StatusList[item.Status]
                        </td>
                        <td>
                            @Model.PriorityList[item.Priority]
                        </td>
                        <td>
                            @Model.MemberList[item.AssignMembersId]
                        </td>
                        <td class="text-center">

                            <a class="btn btn-light" asp-controller="Bug" asp-action="Edit" asp-route-id="@item.BugId">
                                <i class="text-success fa-solid fa-pen"></i>
                            </a>
                            <a class="btn btn-light" onclick="openDeleteBugModal(@item.BugId)">
                                <i class="text-danger fa-solid fa-trash"></i>
                            </a>
@* 
                            <a class="btn btn-light" asp-controller="Bug" asp-action="Details" asp-route-id="@item.BugId">
                                <i class="text-danger fa-solid fa-circle-info"></i>
                            </a>
 *@
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <hr />
    </div>



    <!-- Delete Modal for Bug-->
    <div class="modal fade" id="modalBug" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title text-black" id="exampleModalLabel">Delete Bug !!</h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-capitalize text-danger">
                    You are deleting this bug. After clicking on "Delete" button it won't be undone!!
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" onclick="confirmBugDelete()" class="btn btn-outline-danger">Delete</button>
                </div>
            </div>
        </div>
    </div>

    

}

@section Scripts {
    <script>
        var deleteTaskId = null;
        var userStoryId = null;
        var deleteBugId = null;

        function openDeleteModal(taskId) {
            deleteTaskId = taskId;
            $('#modal').modal('show');
        }

        function openDeleteBugModal(bugId) {
            deleteBugId = bugId;
            $('#modalBug').modal('show');
        }


        function confirmDelete() {
            if (deleteTaskId) {
                $.ajax({
                    url: '/Tasks/Delete/' + deleteTaskId,
                    type: 'POST',
                    success: function (response) {
                        $('#modal').modal('hide');
                        location.reload();
                    },
                    error: function () {
                        alert('Error deleting task.');
                    }
                });
            }
        }

        function confirmBugDelete() {
            if (deleteBugId) {
                $.ajax({
                    url: '/Bug/Delete/' + deleteBugId,
                    type: 'POST',
                    success: function (response) {
                        $('#modal').modal('hide');
                        location.reload();
                    },
                    error: function () {
                        alert('Error deleting task.');
                    }
                });
            }
        }


        function openDeleteUSModal(UsId) {
            deleteTaskId = UsId;
            $('#modalUSD').modal('show');
        }


        function confirmUSDelete() {
            if (deleteTaskId) {
                $.ajax({
                    url: '/UserStory/Delete/' + deleteTaskId,
                    type: 'POST',
                    success: function (response) {
                        $('#modal').modal('hide');
                        window.location.href = '@Url.Action("Index", "UserStory", new{projectId=ViewBag.ProjectId})';
                    },
                    error: function () {
                        alert('Error deleting sub task.');
                    }
                });
            }
        }

        // Button tracking handle
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll("[id^=playButton-]").forEach(button => {
                let taskId = button.id.split("-")[1];
                let status = localStorage.getItem("tracking-" + taskId);

                if (status === "Started") {
                    document.getElementById("playButton-" + taskId).classList.add("d-none");
                    document.getElementById("pauseButton-" + taskId).classList.remove("d-none");
                } else {
                    document.getElementById("playButton-" + taskId).classList.remove("d-none");
                    document.getElementById("pauseButton-" + taskId).classList.add("d-none");
                }
            });
        });

        // Convert seconds into day, hour, minutes and second
        function secondsToDHMS(seconds) {
            seconds = Number(seconds);
            var day = Math.floor(seconds / (3600 * 24));
            var hour = Math.floor((seconds % (3600 * 24)) / 3600);
            var minutes = Math.floor((seconds % 3600) / 60);
            var sec = Math.floor(seconds % 60);

            if (sec == 0) {
                return sec + " seconds";
            }
            else if (minutes == 0) {
                return sec + " seconds";
            }
            else if (hour == 0) {
                return minutes + " minutes " + sec + " seconds";
            }
            else if (day == 0) {
                return hour + " hours " + minutes + " minutes " + sec + " seconds";
            }
            else {
                return day + " days " + hour + " hours " + minutes + " minutes " + sec + " seconds";
            }
        }

        // formating date
        function formatedDate(val) {
            var date = new Date(val);
            const month = String(date.getUTCMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const year = date.getFullYear();
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');

            return `${year}/${month}/${day} ${hours}:${minutes}`;
        }

        // Formate the details
        function showDetailsModal(startTime, endTime, totalTime) {
            startTime = "Start time: " + startTime + "\n";
            endTime = "End time: " + endTime + "\n";
            seconds = secondsToDHMS(totalTime);
            totalTime = "Total working time: " + seconds;

            var mainTimeDescription = startTime + endTime + totalTime;
            return mainTimeDescription;
        }

        // History table
        function createTimeHistoryTable(data) {
            let timeHistoryTable = `
                        <table class="table table-bordered table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Start Time</th>
                                    <th>End Time</th>
                                    <th>Total Time</th>
                                </tr>
                            </thead>
                            <tbody>`;

            data.forEach(item => {
                const startTime = formatedDate(item.startTime);
                const endTime = formatedDate(item.endTime);
                const totalTime = secondsToDHMS(item.totalTime);

                timeHistoryTable += `
                            <tr>
                                <td>${startTime}</td>
                                <td>${endTime}</td>
                                <td>${totalTime}</td>
                            </tr>`;
            });
            timeHistoryTable += `
                                    </tbody>
                                </table>`;

            return timeHistoryTable;
        }

        // Calling from details button
        function timeDetails(taskId) {
            $.ajax({
                url: "/TimeTrack/GetAllTimeByTaskId",
                type: "GET",
                data: {
                    taskId: taskId
                },
                success: function (response) {
                    if (response.success == true) {
                        var mainTimeDescription = showDetailsModal(response.startTime, response.endTime, response.totalTime);
                        document.getElementById('modalDescription').innerText = mainTimeDescription;
                        var data = response.timeHistory;
                        var timeHistoryTable = createTimeHistoryTable(data);
                        document.getElementById('eachTimeDescription').innerHTML = timeHistoryTable;
                        var myModal = new bootstrap.Modal(document.getElementById('detailsModal'));
                        myModal.show();
                    }
                    else {
                        document.getElementById('modalDescription').innerText = "don't work previously in this task";
                        document.getElementById('eachTimeDescription').innerHTML = `<p>No History</p>`;
                        var myModal = new bootstrap.Modal(document.getElementById('detailsModal'));
                        myModal.show();
                    }
                    
                },
                error: function (xhr, status, error) {
                    alert("Error stopping tracking: " + error);
                }
            });
        }

        // Time track starting
        function startTracking(taskId) {
            $.ajax({
                url: "/TimeTrack/Start",
                type: 'POST',
                data: { taskId: taskId, subTaskId: 0 },
                success: function (response) {
                    if (response.status === "Started") {
                        localStorage.setItem("tracking-" + taskId, "Started");
                    }
                    $("#playButton-" + taskId).addClass("d-none");
                    $("#pauseButton-" + taskId).removeClass("d-none");
                },
                error: function () {
                    alert("Error starting tracking for Task ID: " + taskId + ", SubTask ID: " + subTaskId);

                }
            });
        }

        // Time track stopping
        function stopTracking(taskId) {
            $.ajax({
                url: "/TimeTrack/End",
                type: 'POST',
                data: { taskId: taskId, subTaskId: 0 },
                success: function (response) {
                    if (response.status === "Stopped") {
                        localStorage.setItem("tracking-" + taskId, "Stopped");
                    }
                    $("#pauseButton-" + taskId).addClass("d-none");
                    $("#playButton-" + taskId).removeClass("d-none");
                },
                error: function () {
                    alert("Error stopping tracking for Task ID: " + taskId + ", SubTask ID: " + subTaskId);
                }
            });
        }

    </script>
}

